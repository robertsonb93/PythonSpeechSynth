import sys
import vtlPythonAPI as vtl
import tensorflow as tf
import numpy as np
import TextScraper as sc
import TrainingDataGen as tdg
import matplotlib.pyplot as plt
import time
import csv



#********************************* DEFINITIONS************************************#
#*********************************************************************************#
def grabWindow(inputSize,audio,outputSize,param,offset):
    inOffset = offset * inputSize
    outOffset = offset * (int)(outputSize/2)#So that we can still use the end as the next start.
    input = (audio[inOffset:inOffset+inputSize])
    output = (param[outOffset:outOffset+outputSize])

    return [input,output]

def vectorizeTraining(trainSet):
    audioOut = list()
    paramOut = list()
    for t in trainSet:
        paramOut = paramOut + t.glottis + t.vtp + t.tubeLengths + t.incisor + t.velum
        audioOut = audioOut + t.audio

    return [audioOut,paramOut]

def writeCSV():
    return

def weight_variable(shape):
  initial = tf.random_normal(shape, stddev=0.1)
  return tf.Variable(initial)

#I hope this is correct, Review later if the phi is needed at eachs step or not.
def forwardprop(X, W):

    h    = tf.nn.sigmoid(tf.matmul(X, W[0]))  # The \sigma function
    for w in W[1:len(W)-1]:
        h = tf.nn.sigmoid(tf.matmul(h,w))

    yhat = tf.matmul(h, W[len(W)-1])  # The \varphi function
    return yhat



#******************************END DEFINITIONS************************************#
#*********************************************************************************#


#the outputs from the learner are:

#Number of frames for the sound
#Frames per Second
#The Glottis (list of  length (numGlottisParams * numFrames))
#The Vocal Tract Parameters we start from (list of length(numVocalTractParams * numFrames))
#The Length of tubes in the Synth model (list of length (tubeSections * num Frames))
#The distances from glottis to incisors (list of length(numFrames))
#The areas of the velum (list of of length(numFrames))

#The input to the learner would be the desired sound
#The feedback/error is what is generated by the VTL model from the networks given parameters.


spkr ="test1.speaker"
maxLen = 0.005 #if they all come out at max length it will be 20cm
minLen = 0.0025 #if they all come out at min length it will be 10cm
minFrames = 2
maxFrames = 3
frameRate = 4
examples = 300

#Produce the parameters we use for the generating speech.
paramset = tdg.generateValues(spkr,examples,minFrames,maxFrames,frameRate,minLen,maxLen)

trainSet = list()
count = 0
t_start = time.process_time()
avg = 0
for p in paramset:
    count = count +1
    start = time.process_time() 
    #Produce each parameter set into an audio file so we know the outcome of it.

    trainSet.append(tdg.generateAudio(p,spkr))

    t = time.process_time()-start
    avg = (t+ (count-1)*avg)/count
    print("It took ",t, "to finish one synthesis. Estimated ",avg*(len(paramset)-count), " seconds remaining.")

t_end = time.process_time()
print("Total Training generation time = ",t_end-t_start)

#for t in trainSet:
#    plt.plot(t.audio)
#    plt.show()
#lets see if we can get it to match a single sound. with only a single frame transition of audio.
vtl.initSpeaker(spkr,False)
[srate,tubecount,vtcount,glotcount] = vtl.getSpeakerConstants()
inSize = trainSet[0].samplesPerFrame

#Glottis + vtp + tubeLengths + incisor + velum
outSize = (glotcount + vtcount + tubecount + 2) * 2#Times two for a start and end
[audio,params] = vectorizeTraining(trainSet)

t_start = time.process_time()
entrpy = list()
W = list()
with tf.Session() as sess:

    inputAudio = tf.placeholder(tf.float32,shape=[None,inSize])
    outActual = tf.placeholder(tf.float32,shape=[None,outSize])

    #create Weights (this is basically the network)
    h_size = 256
    W.append(weight_variable((inSize,h_size)))
    for s in range(2):
        W.append(weight_variable((h_size,h_size)))
    W.append(weight_variable((h_size,outSize)))

    #Forward propagation(How to calculate from input to output)
    outEstimate = forwardprop(inputAudio, W)

    #Back Progoation(How to correct the Error from the estimate)
    cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=outActual, logits=outEstimate))
    train_step = tf.train.GradientDescentOptimizer(0.01).minimize(cross_entropy)

    init = tf.global_variables_initializer()
    sess.run(init)

    for i in range(len(trainSet)):
      [inp,outp] = grabWindow(inSize,audio,outSize,params,(i))
      inp = np.reshape(inp,(1,inSize))
      outp = np.reshape(outp,(1,outSize))

      sess.run(train_step, feed_dict={inputAudio: inp, outActual: outp})
      entrpy.append(sess.run(cross_entropy, feed_dict={inputAudio: inp, outActual: outp}))
                     
      
t_end = time.process_time()
print("Total Training Network time = ",t_end-t_start)
plt.plot(entrpy)
plt.show(entrpy)








        

