import sys
import vtlPythonAPI as vtl
import tensorflow as tf
import TextScraper as sc
import TrainingDataGen as tdg
import matplotlib.pyplot as plt
import time

#the outputs from the learner are:

#Number of frames for the sound
#Frames per Second
#The Glottis (list of  length (numGlottisParams * numFrames))
#The Vocal Tract Parameters we start from (list of length(numVocalTractParams * numFrames))
#The Length of tubes in the Synth model (list of length (tubeSections * num Frames))
#The distances from glottis to incisors (list of length(numFrames))
#The areas of the velum (list of of length(numFrames))

#The input to the learner would be the desired sound
#The feedback/error is what is generated by the VTL model from the networks given parameters.


spkr ="test1.speaker"
maxLen = 0.005 #if they all come out at max length it will be 20cm
minLen = 0.0025 #if they all come out at min length it will be 10cm
minFrames = 2
maxFrames = 3
frameRate = 4

#Produce the parameters we use for the generating speech.
paramset = tdg.generateValues(spkr,10,minFrames,maxFrames,frameRate,minLen,maxLen)

trainSet = list()
count = 0
t_start = time.process_time()
avg = 0
for p in paramset:
    count = count +1
    start = time.process_time()
    #Produce each parameter set into an audio file so we know the outcome of it.
    trainSet.append(tdg.generateAudio(p,spkr))

    t = time.process_time()-start
    avg = (t+ (count-1)*avg)/count
    print("It took ",t, "to finish one synthesis. Estimated ",avg*(len(paramset)-count), " seconds remaining.")

t_end = time.process_time()
print("Total Training generation time = ",t_end-t_start)


for t in trainSet:
    plt.plot(t.audio)
    plt.show()


#lets see if we can get it to match a single sound. with only a single frame transition of audio.


vtl.initSpeaker(spkr)
[srate,tubecount,vtcount,glotcount] = vtl.getSpeakerConstants()
sess = tf.InteractiveSession()

inSize = trainSet[0].samplesPerFrame

input = tf.placeholder(tf.float32, shape=[None, inSize])

#Times two for a start and end
#Glottis + vtp + tubeLengths + incisor + velum
outSize = (glotcount + vtcount + tubecount + 2) * 2
y_ = tf.placeholder(tf.float32, shape=[None, outSize])










        

